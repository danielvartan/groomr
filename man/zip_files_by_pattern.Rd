% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zip_files_by_pattern.R
\name{zip_files_by_pattern}
\alias{zip_files_by_pattern}
\title{Zip files by pattern}
\usage{
zip_files_by_pattern(
  files,
  pattern = NULL,
  prefix = NULL,
  suffix = NULL,
  max_size = fs::fs_bytes("1GB"),
  appendices = NULL,
  root = ".",
  dir = root,
  ...
)
}
\arguments{
\item{files}{A \code{\link[base:character]{character}} vector specifying the paths
to the files to be compressed. Only relative paths are supported.
See \code{\link[zip:zip]{zip()}} for more details.}

\item{pattern}{(optional) A \code{\link[base:character]{character}} vector
specifying one or more patterns to group files for zipping. Files
matching each pattern will be aggregated into a single zip file, named
using the pattern and \code{suffix}. If \code{NULL}, each file will be zipped
individually (default: \code{NULL}).}

\item{prefix}{(optional) A string specifying a prefix to be added to the
zip file names (default: \code{NULL}).}

\item{suffix}{(optional) A string specifying a suffix to be added to the
zip file names (default: \code{NULL}).}

\item{max_size}{(optional) An integer or \code{\link[fs:fs_bytes]{fs_bytes}} value
specifying the maximum size of the zip files in bytes. The function will
try to split the files into chunks if the total size of the files exceeds
this value. If an individual file is larger than the limit, it will be
placed in its own chunk. Use \code{Inf} to disable chunking
(default: \code{\link[fs:fs_bytes]{fs_bytes("1GB")}}).}

\item{appendices}{(optional) A \code{\link[base:character]{character}} vector
specifying additional files to be included in each zip file. Like in
\code{files}, only relative paths are supported (default: \code{NULL}).}

\item{root}{(optional) A string specifying the root directory of the files.
See \code{\link[zip:zip]{zip()}} for more details (default: \code{.}).}

\item{dir}{(optional) A string specifying the directory where the zip files
must be saved (default: \code{root}).}

\item{...}{Additional arguments passed to the \code{\link[zip:zip]{zip}} function.}
}
\value{
An invisible \code{\link[base:character]{character}} vector containing the
paths to the created zip files.
}
\description{
\code{zip_files_by_pattern()} compresses files by grouping them according to
specified patterns and splitting them into chunks if needed.
}
\details{
This function uses the \code{\link[zip:zip]{zip}} package for cross-platform
compatibility and efficient file compression.
}
\examples{
files <- c("test_1_1.txt", "test_1_2.txt", "test_2.txt")
appendices <- c("appendix.txt")

txt_dir <- tempfile("dir")
zip_dir <- tempfile("dir")
dir.create(txt_dir)
dir.create(zip_dir)

for (i in files) file.create(file.path(txt_dir, i))
for (i in appendices) file.create(file.path(txt_dir, i))

list.files(txt_dir)
#> [1] "appendix.txt" "test_1_1.txt" "test_1_2.txt" "test_2.txt" # Expected

zip_files_by_pattern(
  files = files,
  pattern = c("test_1", "test_2"),
  appendices = appendices,
  root = txt_dir,
  dir = zip_dir
)

list.files(zip_dir)
#> [1] "test_1.zip" "test_2.zip" # Expected

unzip_dir <- tempfile("dir")
dir.create(unzip_dir)

library(zip)

for (i in file.path(zip_dir, list.files(zip_dir))) {
  unzip(i, exdir = unzip_dir)
}

list.files(unzip_dir)
#> [1] "appendix.txt" "test_1_1.txt" "test_1_2.txt" "test_2.txt" # Expected
}
\seealso{
Other file functions: 
\code{\link{identify_blank_line_neighbors}()},
\code{\link{normalize_hashtags}()},
\code{\link{normalize_names}()},
\code{\link{peek_csv_file}()},
\code{\link{remove_blank_line_dups}()},
\code{\link{replace_in_file}()},
\code{\link{sort_files_by_size}()},
\code{\link{split_file}()},
\code{\link{split_files_by_size}()}
}
\concept{file functions}
