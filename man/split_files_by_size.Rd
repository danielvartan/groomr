% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/split_files_by_size.R
\name{split_files_by_size}
\alias{split_files_by_size}
\title{Split files based on their size}
\usage{
split_files_by_size(
  files,
  max_size = fs::fs_bytes("1GB"),
  order_by_size = TRUE,
  decreasing_size = FALSE,
  root = NULL
)
}
\arguments{
\item{files}{A \code{\link[base:character]{character}} vector of file paths.}

\item{max_size}{(optional) An integer or \code{\link[fs:fs_bytes]{fs_bytes}} value
specifying the maximum total size (in bytes) allowed for each chunk
(default: \code{fs_bytes("1GB")}).}

\item{order_by_size}{(optional) A \code{\link[base:logical]{logical}} flag
indicating whether to sort the files by size before chunking
(default: \code{TRUE}).}

\item{decreasing_size}{(optional) A \code{\link[base:logical]{logical}} flag
indicating whether to sort the files in decreasing order of size.
This is only relevant if \code{order_by_size} is \code{TRUE} (default: \code{FALSE}).}

\item{root}{(optional) A string specifying the root directory of the files.
If \code{NULL}, the function will treat the paths as absolute
(default: \code{NULL}).}
}
\value{
A \code{\link[base:list]{list}} of character vectors, where each vector
contains file paths that fit within the specified size limit.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

\code{split_files_by_size()} splits a vector of file paths into chunks based on
their size. It is useful for managing large files or datasets that need to
be processed in smaller parts.

The function groups files into chunks so that the total size of files in
each chunk does not exceed the specified limit. If an individual file is
larger than the limit, it will be placed in its own chunk. The files are
sorted by size in decreasing order before chunking.
}
\examples{
library(fs)
library(readr)

files <- c("file1.txt", "file2.txt", "file3.txt", "file4.txt", "file5.txt")

dir <- tempfile("dir")
dir.create(dir)

for (i in files) {
  write_lines(rep(letters, sample(1000:10000, 1)), file.path(dir, i))
}

files <- sort_files_by_size(files, root = dir)
sizes <- file_size(file.path(dir, files)) |> as.character() |> trimws()
names(sizes) <- files
sizes

total_size <- file_size(file.path(dir, files)) |> sum()
max_size <- fs::fs_bytes(total_size / 2)

max_size

split_files_by_size(
  files,
  max_size = fs_bytes(total_size / 2),
  root = dir
)
}
\seealso{
Other file functions: 
\code{\link{identify_blank_line_neighbors}()},
\code{\link{normalize_hashtags}()},
\code{\link{normalize_names}()},
\code{\link{peek_csv_file}()},
\code{\link{remove_blank_line_dups}()},
\code{\link{replace_in_file}()},
\code{\link{sort_files_by_size}()},
\code{\link{split_file}()},
\code{\link{zip_files_by_pattern}()}
}
\concept{file functions}
