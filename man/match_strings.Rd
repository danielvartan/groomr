% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_strings.R
\name{match_strings}
\alias{match_strings}
\title{Approximate string matching}
\usage{
match_strings(raw, reference, one_by_one = FALSE, ...)
}
\arguments{
\item{raw}{A \code{\link[base:character]{character}} vector with the data to be
matched.}

\item{reference}{A \code{\link[base:character]{character}} vector with the reference
to match the raw data.}

\item{one_by_one}{A \code{\link[base:logical]{logical}} value indicating whether to
perform one-by-one matching. If \code{TRUE}, the function will match each
string in \code{raw} to the corresponding string in \code{reference}. If \code{FALSE},
the function will match all strings in \code{raw} to all strings in
\code{reference} (default: \code{FALSE}).}

\item{...}{Additional arguments to be passed to
\code{\link[stringdist:amatch]{amatch()}}.}
}
\value{
A \code{\link[tibble:tibble]{tibble}} with the original strings and their
matched counterparts.
}
\description{
\code{match_strings()} performs approximate string matching between two
\code{\link[base:character]{character}} vectors using the
\code{\link[stringdist:amatch]{amatch()}} function from the \code{stringdist} package.

The difference between this function and \code{\link[stringdist:amatch]{amatch()}}
is that \code{match_strings()} returns a \code{\link[tibble:tibble]{tibble}} with the
original strings and their matched counterparts, while
\code{\link[stringdist:amatch]{amatch()}} returns only the indices of the matched
strings.
}
\examples{
raw <- c("sao paulo", "rio de janeiro", "SAO PULO", "RiO de Janiro")
reference <- c("SÃ£o Paulo", "Rio de Janeiro")
match_strings(raw, reference, maxDist = 1)
}
\seealso{
Other match functions: 
\code{\link{find_closest_match_dbl_2}()}
}
\concept{match functions}
