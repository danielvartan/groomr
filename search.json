[{"path":[]},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official email address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement danvartan@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to groomr","title":"Contributing to groomr","text":"First , thanks considering contributing groomr! 👍 ’s people like make rewarding us - project maintainers - work groomr. 😊 groomr open source project, maintained people care. directly funded .","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Contributing to groomr","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"how-you-can-contribute","dir":"","previous_headings":"","what":"How you can contribute","title":"Contributing to groomr","text":"several ways can contribute project. want know contribute open source projects like one, see Open Source Guide.","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"share-the-love-️","dir":"","previous_headings":"How you can contribute","what":"Share the love ❤️","title":"Contributing to groomr","text":"Think groomr useful? Let others discover , telling person, via Twitter blog post. Using groomr paper writing? Consider citing .","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"ask-a-question-️","dir":"","previous_headings":"How you can contribute","what":"Ask a question ⁉️","title":"Contributing to groomr","text":"Using groomr got stuck? Browse documentation see can find solution. Still stuck? Post question new discussion GitHub. offer user support, ’ll try best address , questions often lead better documentation discovery bugs. Want ask question private? Contact package maintainer email.","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"propose-an-idea-","dir":"","previous_headings":"How you can contribute","what":"Propose an idea 💡","title":"Contributing to groomr","text":"idea new groomr feature? Take look documentation discussion list see isn’t included suggested yet. , suggest idea discussion GitHub. can’t promise implement idea, helps : Explain detail work. Keep scope narrow possible. See want contribute code idea well.","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"report-a-bug-","dir":"","previous_headings":"How you can contribute","what":"Report a bug 🐛","title":"Contributing to groomr","text":"Using groomr discovered bug? ’s annoying! Don’t let others experience report issue GitHub can fix . good bug report makes easier us , please include: content utils::sessionInfo(). details local setup might helpful troubleshooting. Detailed steps reproduce bug (tip: use reprex).","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"improve-the-documentation-","dir":"","previous_headings":"How you can contribute","what":"Improve the documentation 📖","title":"Contributing to groomr","text":"Noticed typo website? Think function use better example? Good documentation makes difference, help improve welcome!","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"the-website","dir":"","previous_headings":"How you can contribute > Improve the documentation 📖","what":"The website","title":"Contributing to groomr","text":"website generated pkgdown. means don’t write html: content pulled together documentation code, vignettes, Markdown files, package DESCRIPTION _pkgdown.yml settings. know way around pkgdown, can propose file change improve documentation. , start discussion can point right direction.","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"function-documentation","dir":"","previous_headings":"How you can contribute > Improve the documentation 📖","what":"Function documentation","title":"Contributing to groomr","text":"Functions described comments near code translated documentation using roxygen2. want improve function description: Go R/ directory code repository. Look file function. Propose file change update function documentation roxygen comments (starting #').","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"contribute-code-","dir":"","previous_headings":"How you can contribute","what":"Contribute code 📝","title":"Contributing to groomr","text":"Care fix bugs implement new functionality groomr? Awesome! 👏 look issue list leave comment things want work . See also development guidelines .","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development guidelines","title":"Contributing to groomr","text":"try follow GitHub flow development. Fork repo clone computer. learn process, see guide. forked cloned project since worked , pull changes original repo clone using git pull upstream main. Open RStudio project file (.Rproj). Write code. Test code (bonus points adding unit tests). Document code (see function documentation ). Check code devtools::check() aim 0 errors, warnings notes. Commit push changes. Submit pull request. Also note use tidyverse design guide tidyverse style guide. code must conform principles rules.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Daniel Vartanian Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://danielvartan.github.io/groomr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Vartanian. Author, maintainer, conceptor, copyright holder.","code":""},{"path":"https://danielvartan.github.io/groomr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vartanian, D.. (2025). {groomr}: General tidy tools. R package. https://danielvartan.github.io/groomr","code":"@Misc{,   title = {{groomr}: General tidy tools},   author = {Daniel Vartanian},   year = {2025},   url = {https://danielvartan.github.io/groomr},   note = {R package}, }"},{"path":[]},{"path":"https://danielvartan.github.io/groomr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"General Tidy Functions","text":"groomr R package helps tidy R objects files.","code":""},{"path":"https://danielvartan.github.io/groomr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"General Tidy Functions","text":"can install groomr using remotes package:","code":"remotes::install_github(\"danielvartan/groomr\")"},{"path":"https://danielvartan.github.io/groomr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"General Tidy Functions","text":"functions can use groomr: blank_line_neighbors(): Identify blank lines around line. make_machine_readable(): Make string machine-readable. normalize_names(): Make file directory names machine-readable. remove_blank_line_dups(): Remove duplicate blank lines text files. replace_in_file(): Replace pattern files. split_by_pattern(): Split character vector pattern. split_file(): Split text files multiple files. to_title_case_pt(): Convert title case considering Portuguese rules. Click see full list.","code":""},{"path":"https://danielvartan.github.io/groomr/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"General Tidy Functions","text":"Contributions welcome, including bug reports. Take moment review Guidelines Contributing.","code":""},{"path":"https://danielvartan.github.io/groomr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"General Tidy Functions","text":"groomr code released MIT license.  Become groomr supporter! Click make donation. Please indicate groomr package donation message.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/blank_line_neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify blank lines around a line — blank_line_neighbors","title":"Identify blank lines around a line — blank_line_neighbors","text":"blank_line_neighbors() identify returns indexes blank lines around specific line matching pattern.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/blank_line_neighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify blank lines around a line — blank_line_neighbors","text":"","code":"blank_line_neighbors(   x,   pattern = NULL,   index = NULL,   top = TRUE,   bottom = TRUE )"},{"path":"https://danielvartan.github.io/groomr/reference/blank_line_neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify blank lines around a line — blank_line_neighbors","text":"x character vector. pattern string indicating pattern look . one match, first one used (default: NULL). index integer number indicating line look (default: NULL). parameter provided, pattern parameter ignored. top logical flag indicating function look blank lines top line (default: TRUE). bottom logical flag indicating function look blank lines bottom line (default: TRUE).","code":""},{"path":"https://danielvartan.github.io/groomr/reference/blank_line_neighbors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify blank lines around a line — blank_line_neighbors","text":"integer vector indexes blank lines.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/blank_line_neighbors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify blank lines around a line — blank_line_neighbors","text":"","code":"file <- tempfile() writeLines(c(\"\", \"line 1\", \"\", \"\", \"line 2\", \"\", \"\", \"line 3\", \"\"), file) x <- readLines(file)  blank_line_neighbors(x, pattern = \"^line 2$\") #> [1] 4 6 #> [1] 4 6 # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/cutter.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut a vector into pieces — cutter","title":"Cut a vector into pieces — cutter","text":"cutter() cut vectors pieces cutting points/indexes.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/cutter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut a vector into pieces — cutter","text":"","code":"cutter(x, index, between = NULL, rm_start = FALSE, rm_end = FALSE)"},{"path":"https://danielvartan.github.io/groomr/reference/cutter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut a vector into pieces — cutter","text":"x atomic vector (e.g., character, integer, numeric, factor, POSIXct). index integerish numeric object integer object indexes/cutting points. (optional) string object indicating direction cut (choices: \"left\", \"right\"). argument need assigned cut must performed indexes values (default: NULL). rm_start (optional) logical value indicating start element cut must removed (default: FALSE). rm_end (optional) logical value indicating end element cut must removed (default: FALSE).","code":""},{"path":"https://danielvartan.github.io/groomr/reference/cutter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut a vector into pieces — cutter","text":"list object cut pieces elements.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/cutter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cut a vector into pieces — cutter","text":"cutter() can perform different kinds cuts. examples.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/cutter.html","id":"cutting-by-index-values","dir":"Reference","previous_headings":"","what":"Cutting by index values","title":"Cut a vector into pieces — cutter","text":"","code":"cutter(seq(10), c(3, 9))     cut         cut     |           | 1 2 3 4 5 6 7 8 9 10  Element 1: 1, 2 Element 2: 4, 5, 6, 7, 8 Element 3: 10"},{"path":"https://danielvartan.github.io/groomr/reference/cutter.html","id":"cutting-between-index-values","dir":"Reference","previous_headings":"","what":"Cutting between index values","title":"Cut a vector into pieces — cutter","text":"","code":"cutter(seq(10), c(3, 9), between = \"left\")    cut         cut    |           | 1 2 3 4 5 6 7 8 9 10  Element 1: 1, 2 Element 2: 3, 4, 5, 6, 7, 8 Element 3: 9, 10 cutter(seq(10), c(3, 9), between = \"right\")      cut         cut      |           | 1 2 3 4 5 6 7 8 9 10  Element 1: 1, 2, 3 Element 2: 4, 5, 6, 7, 8, 9 Element 3: 10"},{"path":"https://danielvartan.github.io/groomr/reference/cutter.html","id":"removing-tips","dir":"Reference","previous_headings":"","what":"Removing tips","title":"Cut a vector into pieces — cutter","text":"","code":"cutter(seq(20), c(7, 16), rm_start = TRUE, rm_end = TRUE)             cut                      cut             |                        | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 |---------|                            |---------|  start tip                               end tip  Element 1: 8, 9, 10, 11, 12, 13, 14, 15"},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/cutter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut a vector into pieces — cutter","text":"","code":"## Cutting by index values  cutter(seq(10), c(3, 9)) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 4 5 6 7 8 #>  #> [[3]] #> [1] 10 #>   ## Cutting between index values  cutter(seq(10), c(3, 9), between = \"left\") #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 3 4 5 6 7 8 #>  #> [[3]] #> [1]  9 10 #>   cutter(seq(10), c(3, 9), between = \"right\") #> [[1]] #> [1] 1 2 3 #>  #> [[2]] #> [1] 4 5 6 7 8 9 #>  #> [[3]] #> [1] 10 #>   ## Removing start or end tips  cutter(seq(10), c(3, 9), rm_start = TRUE) #> [[1]] #> [1] 4 5 6 7 8 #>  #> [[2]] #> [1] 10 #>   cutter(seq(10), c(3, 9), rm_end = TRUE) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 4 5 6 7 8 #>"},{"path":"https://danielvartan.github.io/groomr/reference/groomr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"groomr: General Tidy Functions — groomr-package","title":"groomr: General Tidy Functions — groomr-package","text":"set tools tidy R objects files.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/groomr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"groomr: General Tidy Functions — groomr-package","text":"Maintainer: Daniel Vartanian danvartan@gmail.com (ORCID) [conceptor, copyright holder]","code":""},{"path":"https://danielvartan.github.io/groomr/reference/make_machine_readable.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a string machine-readable — make_machine_readable","title":"Make a string machine-readable — make_machine_readable","text":"make_machine_readable() makes string machine-readable converting lowercase, removing special characters, replacing spaces hyphens. function follows naming conventions Tidyverse Style Guide.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/make_machine_readable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a string machine-readable — make_machine_readable","text":"","code":"make_machine_readable(x)"},{"path":"https://danielvartan.github.io/groomr/reference/make_machine_readable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a string machine-readable — make_machine_readable","text":"x character vector.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/make_machine_readable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a string machine-readable — make_machine_readable","text":"character vector machine-readable names.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/make_machine_readable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a string machine-readable — make_machine_readable","text":"","code":"make_machine_readable(\"Test - Test \") #> [1] \"test-test\" #> [1] \"test-test\" # Expected  make_machine_readable(\"!@#TéSt$$%^\") #> [1] \"test\" #> [1] \"test\" # Expected  make_machine_readable(\"TeSt_test.txt\") #> [1] \"test-test.txt\" #> [1] \"test-test.txt\" # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/normalize_hashtags.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize hashtags inside files — normalize_hashtags","title":"Normalize hashtags inside files — normalize_hashtags","text":"normalize_hashtags() lower case remove accents non-alphanumeric characters hashtags.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/normalize_hashtags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize hashtags inside files — normalize_hashtags","text":"","code":"normalize_hashtags(dir = utils::choose.dir(), tag_line = 1)"},{"path":"https://danielvartan.github.io/groomr/reference/normalize_hashtags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize hashtags inside files — normalize_hashtags","text":"dir (optional) string indicating directory files. function look just files, directories affected. (default:: utils::choose.dir()). tag_line (optional) number indicating line tags .","code":""},{"path":"https://danielvartan.github.io/groomr/reference/normalize_hashtags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize hashtags inside files — normalize_hashtags","text":"invisible NULL. function aim return values.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/normalize_hashtags.html","id":"tip","dir":"Reference","previous_headings":"","what":"Tip","title":"Normalize hashtags inside files — normalize_hashtags","text":"","code":"normalize_hashtags(normalizePath(readClipboard(), \"/\", mustWork = FALSE))"},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/normalize_hashtags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize hashtags inside files — normalize_hashtags","text":"","code":"file_name <- tempfile(tmpdir = tempfile()) dir_name <- dirname(file_name) dir.create(dir_name) file.create(file_name) #> [1] TRUE  con <- file(file_name, \"r+\") data <- c(\"#tEs43(23)ds #45&$dAAsad-dsade\", \"\", \"Test\", \"\") writeLines(data, con = con) close(con)  normalize_hashtags(dir_name, tag_line = 1)  con <- file(file_name, \"r+\") readLines(con) #> [1] \"#tes4323ds #45daasad-dsade\" \"\"                           #> [3] \"Test\"                       \"\"                           #> [5] \"st\"                         \"\"                           close(con)"},{"path":"https://danielvartan.github.io/groomr/reference/normalize_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Make file and directory names machine-readable — normalize_names","title":"Make file and directory names machine-readable — normalize_names","text":"normalize_names() normalizes file directory names make machine-readable. function uses dir_ls() list files/directories rename, along make_machine_readable() rename files.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/normalize_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make file and directory names machine-readable — normalize_names","text":"","code":"normalize_names(   path = clipr::read_clip(),   regex = \"^README|^OFL.txt$|^DESCRIPTION|^Google README.txt$\",   invert = TRUE,   ... )"},{"path":"https://danielvartan.github.io/groomr/reference/normalize_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make file and directory names machine-readable — normalize_names","text":"path (Optional) character string indicating directory path. Defaults clipboard content. regex (Optional) character string regular expression filter files/directories rename (Default: \"^README|^OFL.txt$|^DESCRIPTION|^Google README.txt$\"). invert (Optional) logical flag indicating regular expression regex negated (Default: TRUE). ... (Optional) Additional arguments passed dir_ls() listing files/directories rename.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/normalize_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make file and directory names machine-readable — normalize_names","text":"invisible NULL. function used side effect.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/normalize_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make file and directory names machine-readable — normalize_names","text":"","code":"dir <- tempfile(\"\") dir.create(dir) |> invisible()  file <- tempfile(\"Test - Test-\", tmpdir = dir) file.create(file) |> invisible()  normalize_names(dir)  list.files(dir) #> [1] \"test-test-1c957722fdbd\" #> [1] \"test-test-***\" # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/remove_blank_line_dups.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove blank line duplicates from a file — remove_blank_line_dups","title":"Remove blank line duplicates from a file — remove_blank_line_dups","text":"function removes blank line duplicates (e.g., \"\" line, followed another \"\" line) file. can also remove blank lines top bottom file, remove blank lines around text block.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/remove_blank_line_dups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove blank line duplicates from a file — remove_blank_line_dups","text":"","code":"remove_blank_line_dups(   file,   remove_caps = TRUE,   block_fix = TRUE,   block_start_pattern = \"<!-- badges: start -->\",   block_end_pattern = \"<!-- badges: end -->\" )"},{"path":"https://danielvartan.github.io/groomr/reference/remove_blank_line_dups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove blank line duplicates from a file — remove_blank_line_dups","text":"file string indicating file path. remove_caps logical flag indicating function remove blank lines top bottom file. block_fix logical flag indicating function fix blank lines around text block block_start_pattern string indicating start text block. block_end_pattern string indicating end text block.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/remove_blank_line_dups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove blank line duplicates from a file — remove_blank_line_dups","text":"invisible NULL. function aim return values.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/remove_blank_line_dups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove blank line duplicates from a file — remove_blank_line_dups","text":"","code":"file <- tempfile() writeLines(c(\"\", \"line 1\", \"\", \"\", \"line 2\", \"\", \"\", \"line 3\", \"\"), file)  remove_blank_line_dups(file)  readLines(file) #> [1] \"line 1\" \"\"       \"line 2\" \"\"       \"line 3\" #> [1] \"line 1\" \"\"       \"line 2\" \"\"       \"line 3\" # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/replace_in_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace patterns inside files — replace_in_file","title":"Replace patterns inside files — replace_in_file","text":"replace_in_file() searches line file replaces specific pattern found.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/replace_in_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace patterns inside files — replace_in_file","text":"","code":"replace_in_file(dir = clipr::read_clip(), pattern, replacement)"},{"path":"https://danielvartan.github.io/groomr/reference/replace_in_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace patterns inside files — replace_in_file","text":"dir (Optional) string indicating directory files. Defaults clipboard content. pattern string indicating pattern look . default interpretation regular expression. parameter used stringr::str_replace_all(). replacement string indicating replacement value. parameter used stringr::str_replace_all().","code":""},{"path":"https://danielvartan.github.io/groomr/reference/replace_in_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace patterns inside files — replace_in_file","text":"invisible NULL. function used side effect.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/replace_in_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace patterns inside files — replace_in_file","text":"","code":"file_name <- tempfile(tmpdir = tempfile()) dir_name <- dirname(file_name) dir.create(dir_name) file.create(file_name) #> [1] TRUE  con <- file(file_name, \"r+\") data <- c(\"01:00:56\", \"\", \"Test\", \"\") writeLines(data, con = con) close(con)  replace_in_file(   dir = dir_name,   pattern = \"([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]\",   replacement = \"\"   )  con <- file(file_name, \"r+\") readLines(con) #> [1] \"\"     \"\"     \"Test\" \"\"     \"\"     \"\"     \"Test\" \"\"     close(con)"},{"path":"https://danielvartan.github.io/groomr/reference/rm_caps.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the first and/or last element of a `character“ vector — rm_caps","title":"Remove the first and/or last element of a `character“ vector — rm_caps","text":"rm_caps() removes first /last element `character“ vector.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/rm_caps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the first and/or last element of a `character“ vector — rm_caps","text":"","code":"rm_caps(x, start = TRUE, end = TRUE)"},{"path":"https://danielvartan.github.io/groomr/reference/rm_caps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the first and/or last element of a `character“ vector — rm_caps","text":"x character vector. start logical flag indicating whether remove first element x (Default: TRUE). end logical flag indicating whether remove last element x (Default: TRUE).","code":""},{"path":"https://danielvartan.github.io/groomr/reference/rm_caps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove the first and/or last element of a `character“ vector — rm_caps","text":"character vector.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/rm_caps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove the first and/or last element of a `character“ vector — rm_caps","text":"","code":"rm_caps(c(\"a\", \"b\", \"c\")) #> [1] \"b\" #> [1] \"b\" # Expected  rm_caps(c(\"a\", \"b\", \"c\"), start = FALSE) #> [1] \"a\" \"b\" #> [1] \"a\" \"b\" # Expected  rm_caps(c(\"a\", \"b\", \"c\"), end = FALSE) #> [1] \"b\" \"c\" #> [1] \"b\" \"c\" # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/split_by_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a character vector by a pattern — split_by_pattern","title":"Split a character vector by a pattern — split_by_pattern","text":"split_by_pattern() allow split character vector considering start end pattern.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/split_by_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a character vector by a pattern — split_by_pattern","text":"","code":"split_by_pattern(   x,   start_pattern = \"^# |^## |---\",   end_pattern = NULL,   name_list = TRUE,   include_start = FALSE )"},{"path":"https://danielvartan.github.io/groomr/reference/split_by_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a character vector by a pattern — split_by_pattern","text":"x character vector. start_pattern (Optional) string start pattern (Default: \"^# |^## |---\"). end_pattern (Optional) string end pattern. Use NULL one (Default: NULL). name_list (Optional) logical flag indicating output item name (Default: TRUE). include_start (Optional) logical flag indicating line flagged start pattern included split (Default: FALSE).","code":""},{"path":"https://danielvartan.github.io/groomr/reference/split_by_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a character vector by a pattern — split_by_pattern","text":"list split character vector.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/split_by_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a character vector by a pattern — split_by_pattern","text":"","code":"x <- c(  \"# Title 1\",  \"## Subtitle 1\",  \"Content 1\",  \"Content 2\",  \"# Title 2\",  \"## Subtitle 2\",  \"Content 3\",  \"Content 4\"  )   split_by_pattern(    x,    start_pattern = \"^# |^## |---\",    end_pattern = NULL,    name_list = TRUE,    include_start = FALSE  ) #> $`# Title 1 [line 1]` #> character(0) #>  #> $`## Subtitle 1 [line 2]` #> [1] \"Content 1\" \"Content 2\" #>  #> $`# Title 2 [line 5]` #> character(0) #>  #> $`## Subtitle 2 [line 6]` #> [1] \"Content 3\" \"Content 4\" #>"},{"path":"https://danielvartan.github.io/groomr/reference/split_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Split files into parts — split_file","title":"Split files into parts — split_file","text":"split_file() split single file n parts.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/split_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split files into parts — split_file","text":"","code":"split_file(file = file.choose(), n, dir = dirname(file), has_header = FALSE)"},{"path":"https://danielvartan.github.io/groomr/reference/split_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split files into parts — split_file","text":"file (Optional) string indicating file path. (Default:: file.choose()). n integer number indicating amount parts split file. dir (Optional) string indicating directory write file parts. (Default:: dirname(file)). has_header (Optional) logical flag indicating file header (e.g., CSV file). TRUE, header repeated first line every part (Default: FALSE).","code":""},{"path":"https://danielvartan.github.io/groomr/reference/split_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split files into parts — split_file","text":"invisible NULL. function used side effect.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/split_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split files into parts — split_file","text":"","code":"file_name <- tempfile(tmpdir = tempfile()) dir_name <- dirname(file_name) dir.create(dir_name) file.create(file_name) #> [1] TRUE  con <- file(file_name, \"r+\") data <- as.character(0:100) writeLines(data, con = con) close(con)  split_file(file = file_name, n = 3)  con <- file(file_name, \"r+\") readLines(con) #>   [1] \"0\"   \"1\"   \"2\"   \"3\"   \"4\"   \"5\"   \"6\"   \"7\"   \"8\"   \"9\"   \"10\"  \"11\"  #>  [13] \"12\"  \"13\"  \"14\"  \"15\"  \"16\"  \"17\"  \"18\"  \"19\"  \"20\"  \"21\"  \"22\"  \"23\"  #>  [25] \"24\"  \"25\"  \"26\"  \"27\"  \"28\"  \"29\"  \"30\"  \"31\"  \"32\"  \"33\"  \"34\"  \"35\"  #>  [37] \"36\"  \"37\"  \"38\"  \"39\"  \"40\"  \"41\"  \"42\"  \"43\"  \"44\"  \"45\"  \"46\"  \"47\"  #>  [49] \"48\"  \"49\"  \"50\"  \"51\"  \"52\"  \"53\"  \"54\"  \"55\"  \"56\"  \"57\"  \"58\"  \"59\"  #>  [61] \"60\"  \"61\"  \"62\"  \"63\"  \"64\"  \"65\"  \"66\"  \"67\"  \"68\"  \"69\"  \"70\"  \"71\"  #>  [73] \"72\"  \"73\"  \"74\"  \"75\"  \"76\"  \"77\"  \"78\"  \"79\"  \"80\"  \"81\"  \"82\"  \"83\"  #>  [85] \"84\"  \"85\"  \"86\"  \"87\"  \"88\"  \"89\"  \"90\"  \"91\"  \"92\"  \"93\"  \"94\"  \"95\"  #>  [97] \"96\"  \"97\"  \"98\"  \"99\"  \"100\" close(con)  con <- file(paste0(file_name, \"_part-1\"), \"r+\") readLines(con) #>  [1] \"0\"  \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" #> [16] \"15\" \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" #> [31] \"30\" \"31\" \"32\" \"33\" close(con)  con <- file(paste0(file_name, \"_part-2\"), \"r+\") readLines(con) #>  [1] \"34\" \"35\" \"36\" \"37\" \"38\" \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\" \"46\" \"47\" \"48\" #> [16] \"49\" \"50\" \"51\" \"52\" \"53\" \"54\" \"55\" \"56\" \"57\" \"58\" \"59\" \"60\" \"61\" \"62\" \"63\" #> [31] \"64\" \"65\" \"66\" \"67\" close(con)  con <- file(paste0(file_name, \"_part-3\"), \"r+\") readLines(con) #>  [1] \"68\"  \"69\"  \"70\"  \"71\"  \"72\"  \"73\"  \"74\"  \"75\"  \"76\"  \"77\"  \"78\"  \"79\"  #> [13] \"80\"  \"81\"  \"82\"  \"83\"  \"84\"  \"85\"  \"86\"  \"87\"  \"88\"  \"89\"  \"90\"  \"91\"  #> [25] \"92\"  \"93\"  \"94\"  \"95\"  \"96\"  \"97\"  \"98\"  \"99\"  \"100\" close(con)"},{"path":"https://danielvartan.github.io/groomr/reference/to_ascii.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a string to ASCII — to_ascii","title":"Convert a string to ASCII — to_ascii","text":"to_ascii() converts string ASCII, removing non-ASCII characters.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/to_ascii.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a string to ASCII — to_ascii","text":"","code":"to_ascii(x, from = \"UTF-8\")"},{"path":"https://danielvartan.github.io/groomr/reference/to_ascii.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a string to ASCII — to_ascii","text":"x character vector. character string indicating encoding input string, See iconv learn . (Default: \"UTF-8\").","code":""},{"path":"https://danielvartan.github.io/groomr/reference/to_ascii.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a string to ASCII — to_ascii","text":"character vector.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/to_ascii.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a string to ASCII — to_ascii","text":"","code":"to_ascii(\"São Paulo\") #> [1] \"Sao Paulo\" #> [1] \"Sao Paulo\" # Expected  to_ascii(\"Île-de-France\") #> [1] \"Ile-de-France\" #> [1] \"Ile-de-France\" # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/to_title_case_pt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to title case considering Portuguese rules — to_title_case_pt","title":"Convert to title case considering Portuguese rules — to_title_case_pt","text":"to_title_case_pt() converts character vector title case, keeping classes words lower case. written Portuguese (PT), converting title case, usual keep title case words, like prepositions, conjunctions, articles kinds pronouns. function locates cases converts lower case. (Adapted original function to_title_case() José de Jesus Filho)","code":""},{"path":"https://danielvartan.github.io/groomr/reference/to_title_case_pt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to title case considering Portuguese rules — to_title_case_pt","text":"","code":"to_title_case_pt(   x,   articles = TRUE,   conjunctions = TRUE,   oblique_pronouns = TRUE,   prepositions = TRUE,   custom_rules = c(`(.)\\\\bD(el)\\\\b` = \"\\\\1d\\\\2\") )"},{"path":"https://danielvartan.github.io/groomr/reference/to_title_case_pt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to title case considering Portuguese rules — to_title_case_pt","text":"x character vector. articles (Optional) logical flag indicating articles converted (default: TRUE). conjunctions (Optional) logical flag indicating conjunctions converted (default: TRUE). oblique_pronouns (Optional) logical flag indicating oblique pronouns converted (default: TRUE). prepositions (Optional) logical flag indicating prepositions converted (default: TRUE). custom_rules (Optional) character vector custom rules applied. syntax c(\"regex\" = \"replacement\"). default c(\"(.)\\\\bD(el)\\\\b\" = \"\\\\1d\\\\2\"), converts Del del.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/to_title_case_pt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to title case considering Portuguese rules — to_title_case_pt","text":"character vector.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/to_title_case_pt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert to title case considering Portuguese rules — to_title_case_pt","text":"José de Jesus Filho","code":""},{"path":"https://danielvartan.github.io/groomr/reference/to_title_case_pt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to title case considering Portuguese rules — to_title_case_pt","text":"","code":"to_title_case_pt(\"Desterro de Entre Rios\") #> [1] \"Desterro de entre Rios\" #> [1] \"Desterro de entre Rios\" # Expected  to_title_case_pt(\"São João Del Rei\") #> [1] \"São João del Rei\" #> [1] \"São João del Rei\" # Expected  to_title_case_pt(\"Sant'ana do Livramento\") #> [1] \"Sant'Ana do Livramento\" #> [1] \"Sant'Ana do Livramento\" # Expected  to_title_case_pt(\"Alta Floresta d'Oeste\") #> [1] \"Alta Floresta D'Oeste\" #> [1] \"Alta Floresta D'Oeste\" # Expected"},{"path":"https://danielvartan.github.io/groomr/news/index.html","id":"groomr-0009000","dir":"Changelog","previous_headings":"","what":"groomr 0.0.0.9000","title":"groomr 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
