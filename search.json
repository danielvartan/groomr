[{"path":[]},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official email address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement danvartan@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://danielvartan.github.io/groomr/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to groomr","title":"Contributing to groomr","text":"First , thanks considering contributing groomr! 👍 ’s people like make rewarding us - project maintainers - work groomr. 😊 groomr open source project, maintained people care. directly funded .","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Contributing to groomr","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"how-you-can-contribute","dir":"","previous_headings":"","what":"How you can contribute","title":"Contributing to groomr","text":"several ways can contribute project. want know contribute open source projects like one, see Open Source Guide.","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"share-the-love-️","dir":"","previous_headings":"How you can contribute","what":"Share the love ❤️","title":"Contributing to groomr","text":"Think groomr useful? Let others discover , telling person, via Twitter blog post. Using groomr paper writing? Consider citing .","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"ask-a-question-️","dir":"","previous_headings":"How you can contribute","what":"Ask a question ⁉️","title":"Contributing to groomr","text":"Using groomr got stuck? Browse documentation see can find solution. Still stuck? Post question new discussion GitHub. offer user support, ’ll try best address , questions often lead better documentation discovery bugs. Want ask question private? Contact package maintainer email.","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"propose-an-idea-","dir":"","previous_headings":"How you can contribute","what":"Propose an idea 💡","title":"Contributing to groomr","text":"idea new groomr feature? Take look documentation discussion list see isn’t included suggested yet. , suggest idea discussion GitHub. can’t promise implement idea, helps : Explain detail work. Keep scope narrow possible. See want contribute code idea well.","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"report-a-bug-","dir":"","previous_headings":"How you can contribute","what":"Report a bug 🐛","title":"Contributing to groomr","text":"Using groomr discovered bug? ’s annoying! Don’t let others experience report issue GitHub can fix . good bug report makes easier us , please include: content utils::sessionInfo(). details local setup might helpful troubleshooting. Detailed steps reproduce bug (tip: use reprex).","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"improve-the-documentation-","dir":"","previous_headings":"How you can contribute","what":"Improve the documentation 📖","title":"Contributing to groomr","text":"Noticed typo website? Think function use better example? Good documentation makes difference, help improve welcome!","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"the-website","dir":"","previous_headings":"How you can contribute > Improve the documentation 📖","what":"The website","title":"Contributing to groomr","text":"website generated pkgdown. means don’t write html: content pulled together documentation code, vignettes, Markdown files, package DESCRIPTION _pkgdown.yml settings. know way around pkgdown, can propose file change improve documentation. , start discussion can point right direction.","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"function-documentation","dir":"","previous_headings":"How you can contribute > Improve the documentation 📖","what":"Function documentation","title":"Contributing to groomr","text":"Functions described comments near code translated documentation using roxygen2. want improve function description: Go R/ directory code repository. Look file function. Propose file change update function documentation roxygen comments (starting #').","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"contribute-code-","dir":"","previous_headings":"How you can contribute","what":"Contribute code 📝","title":"Contributing to groomr","text":"Care fix bugs implement new functionality groomr? Awesome! 👏 look issue list leave comment things want work . See also development guidelines .","code":""},{"path":"https://danielvartan.github.io/groomr/CONTRIBUTING.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development guidelines","title":"Contributing to groomr","text":"try follow GitHub flow development. Fork repo clone computer. learn process, see guide. forked cloned project since worked , pull changes original repo clone using git pull upstream main. Open RStudio project file (.Rproj). Write code. Test code (bonus points adding unit tests). Document code (see function documentation ). Check code devtools::check() aim 0 errors, warnings notes. Commit push changes. Submit pull request. Also note use tidyverse design guide tidyverse style guide. code must conform principles rules.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License.","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://danielvartan.github.io/groomr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands `show w’ `show c’ show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see https://www.gnu.org/licenses/. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read https://www.gnu.org/licenses/--lgpl.html.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation, either version 3 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author>     This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.     This is free software, and you are welcome to redistribute it     under certain conditions; type `show c' for details."},{"path":"https://danielvartan.github.io/groomr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Vartanian. Author, maintainer, conceptor, copyright holder.","code":""},{"path":"https://danielvartan.github.io/groomr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vartanian, D.. (2025). {groomr}: Tidy tools R. R package. https://danielvartan.github.io/groomr","code":"@Misc{,   title = {{groomr}: Tidy tools for R},   author = {Daniel Vartanian},   year = {2025},   url = {https://danielvartan.github.io/groomr},   note = {R package}, }"},{"path":[]},{"path":"https://danielvartan.github.io/groomr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tidy Tools","text":"groomr R package designed help tidy organize R objects files efficiently. provides set functions cleaning, renaming, splitting, managing files data, making workflows streamlined reproducible. find project useful, please consider giving star!  ","code":""},{"path":"https://danielvartan.github.io/groomr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tidy Tools","text":"can install groomr using remotes package:","code":"remotes::install_github(\"danielvartan/groomr\")"},{"path":"https://danielvartan.github.io/groomr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tidy Tools","text":"functions can use groomr: make_machine_readable(): Make string machine-readable normalize_names(): Make file directory names machine-readable remove_blank_line_dups(): Remove blank lines duplicates files replace_in_file(): Replace pattern files sort_files_by_size(): Sort files based size split_by_pattern(): Split character vector pattern split_file(): Split single file n parts. split_files_by_size(): Split files based size to_title_case_pt(): Convert title case considering Portuguese rules. zip_files_by_pattern(): Zip files pattern Click see full list.","code":""},{"path":"https://danielvartan.github.io/groomr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Tidy Tools","text":"groomr code released GNU General Public License Version 3.","code":"Copyright (C) 2025 Daniel Vartanian  The code in this repository is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>."},{"path":"https://danielvartan.github.io/groomr/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Tidy Tools","text":"Contributions welcome, including bug reports. Take moment review Guidelines Contributing.  can also support development groomr becoming sponsor. Click make donation. Please mention groomr donation message.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/cut_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut a vector into segments — cut_vector","title":"Cut a vector into segments — cut_vector","text":"cut_vector() splits vector segments specified cutting points indexes. can define cuts either providing explicit index positions specifying number segments. Additional options allow control whether cuts occur index values, whether remove elements start end resulting segments.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/cut_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut a vector into segments — cut_vector","text":"","code":"cut_vector(   x,   index = NULL,   n = NULL,   between = NULL,   rm_start = FALSE,   rm_end = FALSE,   round_fun = floor )"},{"path":"https://danielvartan.github.io/groomr/reference/cut_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut a vector into segments — cut_vector","text":"x atomic vector. index (optional) integerish numeric object indexes/cutting points (default: NULL). n (optional) integerish number specifying number segments cut vector . n specified, index argument ignored (default: NULL). (optional) string specifying direction cut: \"left\" \"right\". Use argument cut performed index values (default: NULL). rm_start (optional) logical flag indicating start element cut must removed (default: FALSE). rm_end (optional) logical flag indicating end element cut must removed (default: FALSE). round_fun (optional) function round number elements cutting using n (default: floor).","code":""},{"path":"https://danielvartan.github.io/groomr/reference/cut_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut a vector into segments — cut_vector","text":"list object cut pieces elements.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/cut_vector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cut a vector into segments — cut_vector","text":"cut_vector() can perform different kinds cuts. examples.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/cut_vector.html","id":"cutting-by-index-values","dir":"Reference","previous_headings":"","what":"Cutting by index values","title":"Cut a vector into segments — cut_vector","text":"","code":"cut_vector(seq(10), c(3, 9))     cut         cut     |           | 1 2 3 4 5 6 7 8 9 10  Element 1: 1, 2 Element 2: 4, 5, 6, 7, 8 Element 3: 10"},{"path":"https://danielvartan.github.io/groomr/reference/cut_vector.html","id":"cutting-between-index-values","dir":"Reference","previous_headings":"","what":"Cutting between index values","title":"Cut a vector into segments — cut_vector","text":"","code":"cut_vector(seq(10), c(3, 9), between = \"left\")    cut         cut    |           | 1 2 3 4 5 6 7 8 9 10  Element 1: 1, 2 Element 2: 3, 4, 5, 6, 7, 8 Element 3: 9, 10 cut_vector(seq(10), c(3, 9), between = \"right\")      cut         cut      |           | 1 2 3 4 5 6 7 8 9 10  Element 1: 1, 2, 3 Element 2: 4, 5, 6, 7, 8, 9 Element 3: 10"},{"path":"https://danielvartan.github.io/groomr/reference/cut_vector.html","id":"cutting-by-number-of-segments","dir":"Reference","previous_headings":"","what":"Cutting by number of segments","title":"Cut a vector into segments — cut_vector","text":"","code":"cut_vector(seq(10), n = 3, round_fun = floor)      cut   cut      |     | 1 2 3 4 5 6 7 8 9 10  Element 1: 1, 2, 3 Element 2: 4, 5, 6 Element 3: 7, 8, 9, 10 cut_vector(seq(10), n = 3, round_fun = ceiling)        cut     cut        |       | 1 2 3 4 5 6 7 8 9 10  Element 1: 1, 2, 3, 4 Element 2: 5, 6, 7, 8 Element 3: 9, 10"},{"path":"https://danielvartan.github.io/groomr/reference/cut_vector.html","id":"removing-tips","dir":"Reference","previous_headings":"","what":"Removing tips","title":"Cut a vector into segments — cut_vector","text":"","code":"cut_vector(seq(20), c(7, 16), rm_start = TRUE, rm_end = TRUE)             cut                      cut             |                        | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 |---------|                            |---------|  start tip                               end tip  Element 1: 8, 9, 10, 11, 12, 13, 14, 15"},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/cut_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut a vector into segments — cut_vector","text":"","code":"## Cutting by index values  cut_vector(seq(10), c(3, 9)) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 4 5 6 7 8 #>  #> [[3]] #> [1] 10 #>   ## Cutting between index values  cut_vector(seq(10), c(3, 9), between = \"left\") #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 3 4 5 6 7 8 #>  #> [[3]] #> [1]  9 10 #>   cut_vector(seq(10), c(3, 9), between = \"right\") #> [[1]] #> [1] 1 2 3 #>  #> [[2]] #> [1] 4 5 6 7 8 9 #>  #> [[3]] #> [1] 10 #>   ## Removing start or end tips  cut_vector(seq(10), c(3, 9), rm_start = TRUE) #> [[1]] #> [1] 4 5 6 7 8 #>  #> [[2]] #> [1] 10 #>   cut_vector(seq(10), c(3, 9), rm_end = TRUE) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 4 5 6 7 8 #>"},{"path":"https://danielvartan.github.io/groomr/reference/find_closest_match_dbl_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Find closest matches between numeric vectors — find_closest_match_dbl_2","title":"Find closest matches between numeric vectors — find_closest_match_dbl_2","text":"find_closest_match_dbl_2() identifies closest matches two numeric vectors. Matches determined calculating absolute differences reference target values. user-defined tolerance sets maximum acceptable difference match. closest match pair smallest absolute difference falls within specified tolerance.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/find_closest_match_dbl_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find closest matches between numeric vectors — find_closest_match_dbl_2","text":"","code":"find_closest_match_dbl_2(x, y, x_ref, y_ref, tol = 0.05)"},{"path":"https://danielvartan.github.io/groomr/reference/find_closest_match_dbl_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find closest matches between numeric vectors — find_closest_match_dbl_2","text":"x numeric vector. y numeric vector. x_ref numeric vector reference values x. y_ref numeric vector reference values y. tol (optional) numeric value sets maximum acceptable difference match (default: 0.05).","code":""},{"path":"https://danielvartan.github.io/groomr/reference/find_closest_match_dbl_2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find closest matches between numeric vectors — find_closest_match_dbl_2","text":"value found, returns index closest match x_ref/y_ref. Else, returns NA.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/find_closest_match_dbl_2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find closest matches between numeric vectors — find_closest_match_dbl_2","text":"","code":"x <- c(1, 2, 3, 4, 5) y <- c(1.1, 2.1, 3.1, 4.1, 5.1) x_ref <- c(5, 1, 3, 4, 2) y_ref <- c(5, 1, 3, 4, 2) tol <- 0.5  find_closest_match_dbl_2(x, y, x_ref, y_ref, tol) #> [1] 2 5 3 4 1 #> [1] 2 5 3 4 1 # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/groomr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"groomr: Tidy Tools — groomr-package","title":"groomr: Tidy Tools — groomr-package","text":"set tools help tidy organize R objects files efficiently. provides set functions cleaning, renaming, splitting, managing files data, making workflows streamlined reproducible.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/groomr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"groomr: Tidy Tools — groomr-package","text":"Maintainer: Daniel Vartanian danvartan@gmail.com (ORCID) [conceptor, copyright holder]","code":""},{"path":"https://danielvartan.github.io/groomr/reference/identify_blank_line_neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify blank lines around a line — identify_blank_line_neighbors","title":"Identify blank lines around a line — identify_blank_line_neighbors","text":"identify_blank_line_neighbors() identify returns indexes blank lines around specific line matching pattern.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/identify_blank_line_neighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify blank lines around a line — identify_blank_line_neighbors","text":"","code":"identify_blank_line_neighbors(   x,   pattern = NULL,   index = NULL,   top = TRUE,   bottom = TRUE )"},{"path":"https://danielvartan.github.io/groomr/reference/identify_blank_line_neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify blank lines around a line — identify_blank_line_neighbors","text":"x character vector. pattern string indicating pattern look . one match, first one used (default: NULL). index integer number indicating line look (default: NULL). parameter provided, pattern parameter ignored. top logical flag indicating function look blank lines top line (default: TRUE). bottom logical flag indicating function look blank lines bottom line (default: TRUE).","code":""},{"path":"https://danielvartan.github.io/groomr/reference/identify_blank_line_neighbors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify blank lines around a line — identify_blank_line_neighbors","text":"integer vector indexes blank lines.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/identify_blank_line_neighbors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify blank lines around a line — identify_blank_line_neighbors","text":"","code":"library(readr)  file <- tempfile()  c(\"\", \"line 1\", \"\", \"\", \"line 2\", \"\") |> write_lines(file)  x <- read_lines(file)  identify_blank_line_neighbors(x, pattern = \"^line 2$\") #> [1] 4 6 #> [1] 4 6 # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/make_machine_readable.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a string machine-readable — make_machine_readable","title":"Make a string machine-readable — make_machine_readable","text":"make_machine_readable() makes string machine-readable converting lowercase, removing special characters, replacing spaces hyphens. function follows naming conventions Tidyverse Style Guide.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/make_machine_readable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a string machine-readable — make_machine_readable","text":"","code":"make_machine_readable(x)"},{"path":"https://danielvartan.github.io/groomr/reference/make_machine_readable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a string machine-readable — make_machine_readable","text":"x character vector.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/make_machine_readable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a string machine-readable — make_machine_readable","text":"character vector machine-readable names.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/make_machine_readable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a string machine-readable — make_machine_readable","text":"","code":"make_machine_readable(\"Test - Test \") #> [1] \"test-test\" #> [1] \"test-test\" # Expected  make_machine_readable(\"!@#TéSt$$%^\") #> [1] \"test\" #> [1] \"test\" # Expected  make_machine_readable(\"TeSt_test.txt\") #> [1] \"test-test.txt\" #> [1] \"test-test.txt\" # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/match_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate string matching — match_strings","title":"Approximate string matching — match_strings","text":"match_strings() performs approximate string matching two character vectors using amatch() function stringdist package. difference function amatch() match_strings() returns tibble original strings matched counterparts, amatch() returns indices matched strings.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/match_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate string matching — match_strings","text":"","code":"match_strings(raw, reference, one_by_one = FALSE, ...)"},{"path":"https://danielvartan.github.io/groomr/reference/match_strings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate string matching — match_strings","text":"raw character vector data matched. reference character vector reference match raw data. one_by_one logical value indicating whether perform one--one matching. TRUE, function match string raw corresponding string reference. FALSE, function match strings raw strings reference (default: FALSE). ... Additional arguments passed amatch().","code":""},{"path":"https://danielvartan.github.io/groomr/reference/match_strings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate string matching — match_strings","text":"tibble original strings matched counterparts.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/match_strings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate string matching — match_strings","text":"","code":"raw <- c(\"sao paulo\", \"rio de janeiro\", \"SAO PULO\", \"RiO de Janiro\") reference <- c(\"São Paulo\", \"Rio de Janeiro\") match_strings(raw, reference, maxDist = 1) #> # A tibble: 4 × 2 #>   key            value          #>   <chr>          <chr>          #> 1 sao paulo      São Paulo      #> 2 rio de janeiro Rio de Janeiro #> 3 SAO PULO       São Paulo      #> 4 RiO de Janiro  Rio de Janeiro"},{"path":"https://danielvartan.github.io/groomr/reference/normalize_hashtags.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize hashtags inside files — normalize_hashtags","title":"Normalize hashtags inside files — normalize_hashtags","text":"normalize_hashtags() lower case remove accents non-alphanumeric characters hashtags.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/normalize_hashtags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize hashtags inside files — normalize_hashtags","text":"","code":"normalize_hashtags(dir = utils::choose.dir(), tag_line = 1)"},{"path":"https://danielvartan.github.io/groomr/reference/normalize_hashtags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize hashtags inside files — normalize_hashtags","text":"dir (optional) string indicating directory files. function look just files, directories affected. (default:: utils::choose.dir()). tag_line (optional) number indicating line tags .","code":""},{"path":"https://danielvartan.github.io/groomr/reference/normalize_hashtags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize hashtags inside files — normalize_hashtags","text":"invisible NULL. function aim return values.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/normalize_hashtags.html","id":"tip","dir":"Reference","previous_headings":"","what":"Tip","title":"Normalize hashtags inside files — normalize_hashtags","text":"","code":"normalize_hashtags(normalizePath(readClipboard(), \"/\", mustWork = FALSE))"},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/normalize_hashtags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize hashtags inside files — normalize_hashtags","text":"","code":"file_name <- tempfile(tmpdir = tempfile()) dir_name <- dirname(file_name) dir.create(dir_name) file.create(file_name) #> [1] TRUE  con <- file(file_name, \"r+\") data <- c(\"#tEs43(23)ds #45&$dAAsad-dsade\", \"\", \"Test\", \"\") writeLines(data, con = con) close(con)  normalize_hashtags(dir_name, tag_line = 1)  con <- file(file_name, \"r+\") readLines(con) #> [1] \"#tes4323ds #45daasad-dsade\" \"\"                           #> [3] \"Test\"                       \"\"                           #> [5] \"st\"                         \"\"                           close(con)"},{"path":"https://danielvartan.github.io/groomr/reference/normalize_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Make file and directory names machine-readable — normalize_names","title":"Make file and directory names machine-readable — normalize_names","text":"normalize_names() normalizes file directory names make machine-readable. function uses dir_ls() list files/directories rename, along make_machine_readable() rename files.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/normalize_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make file and directory names machine-readable — normalize_names","text":"","code":"normalize_names(   path = clipr::read_clip(),   regexp = \"^README|^OFL|^DESCRIPTION|^Google README\",   invert = TRUE,   ... )"},{"path":"https://danielvartan.github.io/groomr/reference/normalize_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make file and directory names machine-readable — normalize_names","text":"path (optional) character string indicating directory path. Defaults clipboard content. regexp (optional) character string regular expression filter files/directories rename (default: \"^README|^OFL.txt$|^DESCRIPTION|^Google README.txt$\"). invert (optional) logical flag indicating regular expression regex negated (default: TRUE). ... (optional) Additional arguments passed dir_ls() listing files/directories rename.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/normalize_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make file and directory names machine-readable — normalize_names","text":"invisible NULL. function used side effect.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/normalize_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make file and directory names machine-readable — normalize_names","text":"","code":"dir <- tempfile(\"\") dir.create(dir) |> invisible()  file <- tempfile(\"Test - Test-\", tmpdir = dir) file.create(file) |> invisible()  normalize_names(dir)  list.files(dir) #> [1] \"test-test-1dc25597484a\" #> [1] \"test-test-***\" # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/parse_html_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse HTML tables — parse_html_table","title":"Parse HTML tables — parse_html_table","text":"parse_html_table() parses HTML table tibble.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/parse_html_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse HTML tables — parse_html_table","text":"","code":"parse_html_table(x = clipr::read_clip())"},{"path":"https://danielvartan.github.io/groomr/reference/parse_html_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse HTML tables — parse_html_table","text":"x (optional) character vector HTML code.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/parse_html_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse HTML tables — parse_html_table","text":"tibble parsed HTML table.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/parse_html_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse HTML tables — parse_html_table","text":"","code":"x <- c(   \"<table>\",   \"  <tr>\",   \"    <th>Name<\/th>\",   \"    <th>Age<\/th>\",   \"  <\/tr>\",   \"  <tr>\",   \"    <td>Alice<\/td>\",   \"    <td>30<\/td>\",   \"  <\/tr>\",   \"  <tr>\",   \"    <td>Bob<\/td>\",   \"    <td>25<\/td>\",   \"  <\/tr>\",   \"<\/table>\" )  x |> parse_html_table() #> # A tibble: 2 × 2 #>   Name    Age #>   <chr> <int> #> 1 Alice    30 #> 2 Bob      25"},{"path":"https://danielvartan.github.io/groomr/reference/peek_csv_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Peek the dimensions of a CSV file — peek_csv_file","title":"Peek the dimensions of a CSV file — peek_csv_file","text":"peek_csv_file() reads CSV file provides summary contents, including number columns, rows, cells. useful quickly inspecting structure CSV file without loading entire dataset memory.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/peek_csv_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Peek the dimensions of a CSV file — peek_csv_file","text":"","code":"peek_csv_file(file, delim = \",\", skip = 0, has_header = TRUE)"},{"path":"https://danielvartan.github.io/groomr/reference/peek_csv_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Peek the dimensions of a CSV file — peek_csv_file","text":"file string specifying path file. delim string specifying delimiter used file (default: \",\"). skip integer specifying number lines skip reading file (default: 0). has_header logical flag indicating whether file header row. TRUE, first row treated column names (default: TRUE).","code":""},{"path":"https://danielvartan.github.io/groomr/reference/peek_csv_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Peek the dimensions of a CSV file — peek_csv_file","text":"invisible NULL. function used side effect.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/peek_csv_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Peek the dimensions of a CSV file — peek_csv_file","text":"","code":"library(datasets) library(readr)  file <- tempfile()  write_csv(mtcars, file)  peek_csv_file(file) #> The file has 11 columns, 32 rows, and 352 cells. #> The file has 11 columns, 32 rows*, and 352 cells. # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/remove_blank_line_dups.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove blank line duplicates from a file — remove_blank_line_dups","title":"Remove blank line duplicates from a file — remove_blank_line_dups","text":"function removes blank line duplicates (e.g., \"\" line, followed another \"\" line) file. can also remove blank lines top bottom file, remove blank lines around text block.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/remove_blank_line_dups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove blank line duplicates from a file — remove_blank_line_dups","text":"","code":"remove_blank_line_dups(   file,   remove_caps = TRUE,   block_fix = TRUE,   block_start_pattern = \"<!-- badges: start -->\",   block_end_pattern = \"<!-- badges: end -->\" )"},{"path":"https://danielvartan.github.io/groomr/reference/remove_blank_line_dups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove blank line duplicates from a file — remove_blank_line_dups","text":"file string indicating file path. remove_caps logical flag indicating function remove blank lines top bottom file. block_fix logical flag indicating function fix blank lines around text block block_start_pattern string indicating start text block. block_end_pattern string indicating end text block.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/remove_blank_line_dups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove blank line duplicates from a file — remove_blank_line_dups","text":"invisible NULL. function aim return values.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/remove_blank_line_dups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove blank line duplicates from a file — remove_blank_line_dups","text":"","code":"file <- tempfile() writeLines(c(\"\", \"line 1\", \"\", \"\", \"line 2\", \"\", \"\", \"line 3\", \"\"), file)  remove_blank_line_dups(file)  readLines(file) #> [1] \"line 1\" \"\"       \"line 2\" \"\"       \"line 3\" #> [1] \"line 1\" \"\"       \"line 2\" \"\"       \"line 3\" # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/remove_caps.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the first and/or last element of a vector — remove_caps","title":"Remove the first and/or last element of a vector — remove_caps","text":"remove_caps() removes first /last element vector.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/remove_caps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the first and/or last element of a vector — remove_caps","text":"","code":"remove_caps(x, start = TRUE, end = TRUE)"},{"path":"https://danielvartan.github.io/groomr/reference/remove_caps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the first and/or last element of a vector — remove_caps","text":"x atomic vector. start (optional) logical flag indicating whether remove first element x (default: TRUE). end (optional) logical flag indicating whether remove last element x (default: TRUE).","code":""},{"path":"https://danielvartan.github.io/groomr/reference/remove_caps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove the first and/or last element of a vector — remove_caps","text":"vector x first /last element removed.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/remove_caps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove the first and/or last element of a vector — remove_caps","text":"","code":"remove_caps(c(\"a\", \"b\", \"c\")) #> [1] \"b\" #> [1] \"b\" # Expected  remove_caps(c(\"a\", \"b\", \"c\"), start = FALSE) #> [1] \"a\" \"b\" #> [1] \"a\" \"b\" # Expected  remove_caps(c(\"a\", \"b\", \"c\"), end = FALSE) #> [1] \"b\" \"c\" #> [1] \"b\" \"c\" # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/replace_caps.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace the first and/or last element of a vector — replace_caps","title":"Replace the first and/or last element of a vector — replace_caps","text":"replace_caps() replaces first /last element vector.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/replace_caps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace the first and/or last element of a vector — replace_caps","text":"","code":"replace_caps(x, replacement = NA, start = TRUE, end = TRUE)"},{"path":"https://danielvartan.github.io/groomr/reference/replace_caps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace the first and/or last element of a vector — replace_caps","text":"x atomic vector. replacement (optional) value replace first /last element x (default: NA). start (optional) logical flag indicating whether remove first element x (default: TRUE). end (optional) logical flag indicating whether remove last element x (default: TRUE).","code":""},{"path":"https://danielvartan.github.io/groomr/reference/replace_caps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace the first and/or last element of a vector — replace_caps","text":"vector x first /last element replaced.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/replace_caps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace the first and/or last element of a vector — replace_caps","text":"","code":"replace_caps(c(\"a\", \"b\", \"c\")) #> [1] NA  \"b\" NA  #> [1] NA \"b\" NA # Expected  replace_caps(c(\"a\", \"b\", \"c\"), start = FALSE) #> [1] \"a\" \"b\" NA  #> [1] \"a\" \"b\" NA # Expected  replace_caps(c(\"a\", \"b\", \"c\"), end = FALSE) #> [1] NA  \"b\" \"c\" #> [1] \"b\" \"c\" NA # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/replace_in_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace patterns inside files — replace_in_file","title":"Replace patterns inside files — replace_in_file","text":"replace_in_file() searches line file replaces specific pattern found.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/replace_in_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace patterns inside files — replace_in_file","text":"","code":"replace_in_file(file, pattern, replacement)"},{"path":"https://danielvartan.github.io/groomr/reference/replace_in_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace patterns inside files — replace_in_file","text":"file character vector specifying path(s) file(s) perform replacement. pattern character vector specifying pattern(s) (regular expressions) search . multiple patterns provided, must correspond replacement length. replacement character vector specifying replacement value(s) use. element applied corresponding pattern via str_replace_all().","code":""},{"path":"https://danielvartan.github.io/groomr/reference/replace_in_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace patterns inside files — replace_in_file","text":"invisible NULL. function used side effect.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/replace_in_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace patterns inside files — replace_in_file","text":"","code":"file <- tempfile() file.create(file) #> [1] TRUE  con <- file(file, \"r+\") data <- c(\"01:00:56\", \"\", \"Test\", \"\") writeLines(data, con = con) close(con)  replace_in_file(   file = file,   pattern = \"([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]\",   replacement = \"\" )  con <- file(file, \"r+\") readLines(con) #> [1] \"\"     \"\"     \"Test\" \"\"     close(con)"},{"path":"https://danielvartan.github.io/groomr/reference/sort_files_by_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort files based on their size — sort_files_by_size","title":"Sort files based on their size — sort_files_by_size","text":"sort_files_by_size() sorts vector file paths based size. useful organizing files directory preparing files processing.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/sort_files_by_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort files based on their size — sort_files_by_size","text":"","code":"sort_files_by_size(files, decreasing = FALSE, root = NULL)"},{"path":"https://danielvartan.github.io/groomr/reference/sort_files_by_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort files based on their size — sort_files_by_size","text":"files character vector file paths. decreasing (optional) logical flag indicating whether sort files decreasing order size (default: FALSE). root (optional) string specifying root directory files. NULL, function treat paths absolute (default: NULL).","code":""},{"path":"https://danielvartan.github.io/groomr/reference/sort_files_by_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort files based on their size — sort_files_by_size","text":"character vectors file paths sorted size.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/sort_files_by_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort files based on their size — sort_files_by_size","text":"","code":"library(fs) library(readr)  files <- c(\"file1.txt\", \"file2.txt\", \"file3.txt\", \"file4.txt\", \"file5.txt\")  dir <- tempfile(\"dir\") dir.create(dir)  for (i in files) {   write_lines(rep(letters, sample(1000:10000, 1)), file.path(dir, i)) }  sizes <- file_size(file.path(dir, files)) |> as.character() |> trimws() names(sizes) <- files sizes #> file1.txt file2.txt file3.txt file4.txt file5.txt  #>    \"155K\"    \"220K\"    \"505K\"    \"370K\"    \"103K\"   sort_files_by_size(files, root = dir) #> file5.txt file1.txt file2.txt file4.txt file3.txt"},{"path":"https://danielvartan.github.io/groomr/reference/split_by_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a character vector by a pattern — split_by_pattern","title":"Split a character vector by a pattern — split_by_pattern","text":"split_by_pattern() allow split character vector considering start end pattern.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/split_by_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a character vector by a pattern — split_by_pattern","text":"","code":"split_by_pattern(   x,   start_pattern = \"^# |^## |---\",   end_pattern = NULL,   name_list = TRUE,   include_start = FALSE )"},{"path":"https://danielvartan.github.io/groomr/reference/split_by_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a character vector by a pattern — split_by_pattern","text":"x character vector. start_pattern (optional) string start pattern (default: \"^# |^## |---\"). end_pattern (optional) string end pattern. Use NULL one (default: NULL). name_list (optional) logical flag indicating output item name (default: TRUE). include_start (optional) logical flag indicating line flagged start pattern included split (default: FALSE).","code":""},{"path":"https://danielvartan.github.io/groomr/reference/split_by_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a character vector by a pattern — split_by_pattern","text":"list split character vector.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/split_by_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a character vector by a pattern — split_by_pattern","text":"","code":"x <- c(  \"# Title 1\",  \"## Subtitle 1\",  \"Content 1\",  \"Content 2\",  \"# Title 2\",  \"## Subtitle 2\",  \"Content 3\",  \"Content 4\"  )   split_by_pattern(    x,    start_pattern = \"^# |^## |---\",    end_pattern = NULL,    name_list = TRUE,    include_start = FALSE  ) #> $`# Title 1 [line 1]` #> character(0) #>  #> $`## Subtitle 1 [line 2]` #> [1] \"Content 1\" \"Content 2\" #>  #> $`# Title 2 [line 5]` #> character(0) #>  #> $`## Subtitle 2 [line 6]` #> [1] \"Content 3\" \"Content 4\" #>"},{"path":"https://danielvartan.github.io/groomr/reference/split_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a file into parts — split_file","title":"Split a file into parts — split_file","text":"split_file() split single file n parts.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/split_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a file into parts — split_file","text":"","code":"split_file(file = file.choose(), n, dir = dirname(file), has_header = FALSE)"},{"path":"https://danielvartan.github.io/groomr/reference/split_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a file into parts — split_file","text":"file (optional) string indicating file path (default:: file.choose()). n integer number indicating amount parts split file. dir (optional) string indicating directory write file parts. (default:: dirname(file)). has_header (optional) logical flag indicating file header (e.g., CSV file). TRUE, header repeated first line every part (default: FALSE).","code":""},{"path":"https://danielvartan.github.io/groomr/reference/split_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a file into parts — split_file","text":"invisible NULL. function used side effect.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/split_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a file into parts — split_file","text":"","code":"file_name <- tempfile(tmpdir = tempfile()) dir_name <- dirname(file_name) dir.create(dir_name) file.create(file_name) #> [1] TRUE  con <- file(file_name, \"r+\") data <- as.character(0:100) writeLines(data, con = con) close(con)  split_file(file = file_name, n = 3)  con <- file(file_name, \"r+\") readLines(con) #>   [1] \"0\"   \"1\"   \"2\"   \"3\"   \"4\"   \"5\"   \"6\"   \"7\"   \"8\"   \"9\"   \"10\"  \"11\"  #>  [13] \"12\"  \"13\"  \"14\"  \"15\"  \"16\"  \"17\"  \"18\"  \"19\"  \"20\"  \"21\"  \"22\"  \"23\"  #>  [25] \"24\"  \"25\"  \"26\"  \"27\"  \"28\"  \"29\"  \"30\"  \"31\"  \"32\"  \"33\"  \"34\"  \"35\"  #>  [37] \"36\"  \"37\"  \"38\"  \"39\"  \"40\"  \"41\"  \"42\"  \"43\"  \"44\"  \"45\"  \"46\"  \"47\"  #>  [49] \"48\"  \"49\"  \"50\"  \"51\"  \"52\"  \"53\"  \"54\"  \"55\"  \"56\"  \"57\"  \"58\"  \"59\"  #>  [61] \"60\"  \"61\"  \"62\"  \"63\"  \"64\"  \"65\"  \"66\"  \"67\"  \"68\"  \"69\"  \"70\"  \"71\"  #>  [73] \"72\"  \"73\"  \"74\"  \"75\"  \"76\"  \"77\"  \"78\"  \"79\"  \"80\"  \"81\"  \"82\"  \"83\"  #>  [85] \"84\"  \"85\"  \"86\"  \"87\"  \"88\"  \"89\"  \"90\"  \"91\"  \"92\"  \"93\"  \"94\"  \"95\"  #>  [97] \"96\"  \"97\"  \"98\"  \"99\"  \"100\" close(con)  con <- file(paste0(file_name, \"_part-1\"), \"r+\") readLines(con) #>  [1] \"0\"  \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" #> [16] \"15\" \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" #> [31] \"30\" \"31\" \"32\" close(con)  con <- file(paste0(file_name, \"_part-2\"), \"r+\") readLines(con) #>  [1] \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\" \"46\" \"47\" #> [16] \"48\" \"49\" \"50\" \"51\" \"52\" \"53\" \"54\" \"55\" \"56\" \"57\" \"58\" \"59\" \"60\" \"61\" \"62\" #> [31] \"63\" \"64\" \"65\" close(con)  con <- file(paste0(file_name, \"_part-3\"), \"r+\") readLines(con) #>  [1] \"66\"  \"67\"  \"68\"  \"69\"  \"70\"  \"71\"  \"72\"  \"73\"  \"74\"  \"75\"  \"76\"  \"77\"  #> [13] \"78\"  \"79\"  \"80\"  \"81\"  \"82\"  \"83\"  \"84\"  \"85\"  \"86\"  \"87\"  \"88\"  \"89\"  #> [25] \"90\"  \"91\"  \"92\"  \"93\"  \"94\"  \"95\"  \"96\"  \"97\"  \"98\"  \"99\"  \"100\" close(con)"},{"path":"https://danielvartan.github.io/groomr/reference/split_files_by_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Split files based on their size — split_files_by_size","title":"Split files based on their size — split_files_by_size","text":"split_files_by_size() splits vector file paths chunks based size. useful managing large files datasets need processed smaller parts. function groups files chunks total size files chunk exceed specified limit. individual file larger limit, placed chunk. files sorted size decreasing order chunking.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/split_files_by_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split files based on their size — split_files_by_size","text":"","code":"split_files_by_size(   files,   max_size = fs::fs_bytes(\"1GB\"),   order_by_size = TRUE,   decreasing_size = FALSE,   root = NULL )"},{"path":"https://danielvartan.github.io/groomr/reference/split_files_by_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split files based on their size — split_files_by_size","text":"files character vector file paths. max_size (optional) integer fs_bytes value specifying maximum total size (bytes) allowed chunk (default: fs_bytes(\"1GB\")). order_by_size (optional) logical flag indicating whether sort files size chunking (default: TRUE). decreasing_size (optional) logical flag indicating whether sort files decreasing order size. relevant order_by_size TRUE (default: FALSE). root (optional) string specifying root directory files. NULL, function treat paths absolute (default: NULL).","code":""},{"path":"https://danielvartan.github.io/groomr/reference/split_files_by_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split files based on their size — split_files_by_size","text":"list character vectors, vector contains file paths fit within specified size limit.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/split_files_by_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split files based on their size — split_files_by_size","text":"","code":"library(fs) library(readr)  files <- c(\"file1.txt\", \"file2.txt\", \"file3.txt\", \"file4.txt\", \"file5.txt\")  dir <- tempfile(\"dir\") dir.create(dir)  for (i in files) {   write_lines(rep(letters, sample(1000:10000, 1)), file.path(dir, i)) }  files <- sort_files_by_size(files, root = dir) sizes <- file_size(file.path(dir, files)) |> as.character() |> trimws() names(sizes) <- files sizes #> file2.txt file1.txt file3.txt file5.txt file4.txt  #>    \"148K\"    \"156K\"    \"268K\"    \"301K\"    \"398K\"   total_size <- file_size(file.path(dir, files)) |> sum() max_size <- fs::fs_bytes(total_size / 2)  max_size #> 635K  split_files_by_size(   files,   max_size = fs_bytes(total_size / 2),   root = dir ) #> [[1]] #> file2.txt file1.txt file3.txt  #>  #> [[2]] #> file5.txt #>  #> [[3]] #> file4.txt #>"},{"path":"https://danielvartan.github.io/groomr/reference/to_ascii.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a string to ASCII — to_ascii","title":"Convert a string to ASCII — to_ascii","text":"to_ascii() converts string ASCII, removing non-ASCII characters.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/to_ascii.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a string to ASCII — to_ascii","text":"","code":"to_ascii(x, from = \"UTF-8\")"},{"path":"https://danielvartan.github.io/groomr/reference/to_ascii.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a string to ASCII — to_ascii","text":"x character vector. character string indicating encoding input string, See iconv learn . (default: \"UTF-8\").","code":""},{"path":"https://danielvartan.github.io/groomr/reference/to_ascii.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a string to ASCII — to_ascii","text":"character vector.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/to_ascii.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a string to ASCII — to_ascii","text":"","code":"to_ascii(\"São Paulo\") #> [1] \"Sao Paulo\" #> [1] \"Sao Paulo\" # Expected  to_ascii(\"Île-de-France\") #> [1] \"Ile-de-France\" #> [1] \"Ile-de-France\" # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/to_title_case_pt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to title case considering Portuguese rules — to_title_case_pt","title":"Convert to title case considering Portuguese rules — to_title_case_pt","text":"to_title_case_pt() converts character vector title case, keeping classes words lower case. written Portuguese (PT), converting title case, usual keep title case words, like prepositions, conjunctions, articles kinds pronouns. function locates cases converts lower case. (Adapted original function to_title_case() José de Jesus Filho)","code":""},{"path":"https://danielvartan.github.io/groomr/reference/to_title_case_pt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to title case considering Portuguese rules — to_title_case_pt","text":"","code":"to_title_case_pt(   x,   articles = TRUE,   conjunctions = TRUE,   oblique_pronouns = TRUE,   prepositions = TRUE,   custom_rules = c(`(.)\\\\bD(el)\\\\b` = \"\\\\1d\\\\2\") )"},{"path":"https://danielvartan.github.io/groomr/reference/to_title_case_pt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to title case considering Portuguese rules — to_title_case_pt","text":"x character vector. articles (optional) logical flag indicating articles converted (default: TRUE). conjunctions (optional) logical flag indicating conjunctions converted (default: TRUE). oblique_pronouns (optional) logical flag indicating oblique pronouns converted (default: TRUE). prepositions (optional) logical flag indicating prepositions converted (default: TRUE). custom_rules (optional) character vector custom rules applied. syntax c(\"regex\" = \"replacement\"). default c(\"(.)\\\\bD(el)\\\\b\" = \"\\\\1d\\\\2\"), converts Del del.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/to_title_case_pt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to title case considering Portuguese rules — to_title_case_pt","text":"character vector.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/to_title_case_pt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert to title case considering Portuguese rules — to_title_case_pt","text":"José de Jesus Filho","code":""},{"path":"https://danielvartan.github.io/groomr/reference/to_title_case_pt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to title case considering Portuguese rules — to_title_case_pt","text":"","code":"to_title_case_pt(\"Desterro de Entre Rios\") #> [1] \"Desterro de entre Rios\" #> [1] \"Desterro de entre Rios\" # Expected  to_title_case_pt(\"São João Del Rei\") #> [1] \"São João del Rei\" #> [1] \"São João del Rei\" # Expected  to_title_case_pt(\"Sant'ana do Livramento\") #> [1] \"Sant'Ana do Livramento\" #> [1] \"Sant'Ana do Livramento\" # Expected  to_title_case_pt(\"Alta Floresta d'Oeste\") #> [1] \"Alta Floresta D'Oeste\" #> [1] \"Alta Floresta D'Oeste\" # Expected"},{"path":"https://danielvartan.github.io/groomr/reference/zip_files_by_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip files by pattern — zip_files_by_pattern","title":"Zip files by pattern — zip_files_by_pattern","text":"zip_files_by_pattern() compresses files grouping according specified patterns splitting chunks needed.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/zip_files_by_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip files by pattern — zip_files_by_pattern","text":"","code":"zip_files_by_pattern(   files,   pattern = NULL,   prefix = NULL,   suffix = NULL,   max_size = fs::fs_bytes(\"1GB\"),   appendices = NULL,   root = \".\",   dir = root,   ... )"},{"path":"https://danielvartan.github.io/groomr/reference/zip_files_by_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip files by pattern — zip_files_by_pattern","text":"files character vector specifying paths files compressed. relative paths supported. See zip() details. pattern (optional) character vector specifying one patterns group files zipping. Files matching pattern aggregated single zip file, named using pattern suffix. NULL, file zipped individually (default: NULL). prefix (optional) string specifying prefix added zip file names (default: NULL). suffix (optional) string specifying suffix added zip file names (default: NULL). max_size (optional) integer fs_bytes value specifying maximum size zip files bytes. function try split files chunks total size files exceeds value. individual file larger limit, placed chunk. Use Inf disable chunking (default: fs_bytes(\"1GB\")). appendices (optional) character vector specifying additional files included zip file. Like files, relative paths supported (default: NULL). root (optional) string specifying root directory files. See zip() details (default: .). dir (optional) string specifying directory zip files must saved (default: root). ... Additional arguments passed zip function.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/zip_files_by_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip files by pattern — zip_files_by_pattern","text":"invisible character vector containing paths created zip files.","code":""},{"path":"https://danielvartan.github.io/groomr/reference/zip_files_by_pattern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zip files by pattern — zip_files_by_pattern","text":"function uses zip package cross-platform compatibility efficient file compression.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/groomr/reference/zip_files_by_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip files by pattern — zip_files_by_pattern","text":"","code":"files <- c(\"test_1_1.txt\", \"test_1_2.txt\", \"test_2.txt\") appendices <- c(\"appendix.txt\")  txt_dir <- tempfile(\"dir\") zip_dir <- tempfile(\"dir\") dir.create(txt_dir) dir.create(zip_dir)  for (i in files) file.create(file.path(txt_dir, i)) for (i in appendices) file.create(file.path(txt_dir, i))  list.files(txt_dir) #> [1] \"appendix.txt\" \"test_1_1.txt\" \"test_1_2.txt\" \"test_2.txt\"   #> [1] \"appendix.txt\" \"test_1_1.txt\" \"test_1_2.txt\" \"test_2.txt\" # Expected  zip_files_by_pattern(   files = files,   pattern = c(\"test_1\", \"test_2\"),   appendices = appendices,   root = txt_dir,   dir = zip_dir ) #> ℹ Zipping files using 2 patterns: test_1 and test_2. #> ℹ Zipping 2 files matching the pattern test_1 into 1 chunk. #> ℹ Zipping 1 file matching the pattern test_2 into 1 chunk.  list.files(zip_dir) #> [1] \"test_1.zip\" \"test_2.zip\" #> [1] \"test_1.zip\" \"test_2.zip\" # Expected  unzip_dir <- tempfile(\"dir\") dir.create(unzip_dir)  library(zip) #>  #> Attaching package: ‘zip’ #> The following objects are masked from ‘package:utils’: #>  #>     unzip, zip  for (i in file.path(zip_dir, list.files(zip_dir))) {   unzip(i, exdir = unzip_dir) }  list.files(unzip_dir) #> [1] \"appendix.txt\" \"test_1_1.txt\" \"test_1_2.txt\" \"test_2.txt\"   #> [1] \"appendix.txt\" \"test_1_1.txt\" \"test_1_2.txt\" \"test_2.txt\" # Expected"},{"path":"https://danielvartan.github.io/groomr/news/index.html","id":"groomr-0109000-development-version","dir":"Changelog","previous_headings":"","what":"groomr 0.1.0.9000 (Development Version)","title":"groomr 0.1.0.9000 (Development Version)","text":"Added get_file_sizes() function get length files. Added replace_caps() function replace caps atomic vector. Added parse_html_table() function parse HTML tables character vector.","code":""},{"path":"https://danielvartan.github.io/groomr/news/index.html","id":"groomr-010","dir":"Changelog","previous_headings":"","what":"groomr 0.1.0","title":"groomr 0.1.0","text":"🎉 First release.","code":""},{"path":"https://danielvartan.github.io/groomr/news/index.html","id":"groomr-0009000","dir":"Changelog","previous_headings":"","what":"groomr 0.0.0.9000","title":"groomr 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
